{"repository_name":"bytecode","body":"# simple-vm\n\ngreater than\n```rb\nvm = VM.new [ # 10 > 20\n  Op::PUSH, 0,\n  Op::PUSH, 1,\n  Op::GT,\n  Op::ECHO,\n  Op::END\n], [10, 20]\nvm.run # => 0.0 (false)\n```\n\nsimple arithmetic\n```rb\nvm = VM.new [ # 14 + 6 - 12 * 3\n  Op::PUSH, 0,\n  Op::PUSH, 1,\n  Op::PUSH, 2,\n  Op::PUSH, 3,\n  Op::MUL,\n  Op::SUB,\n  Op::ADD,\n  Op::ECHO,\n  Op::END\n], [14, 6, 12, 3]\nvm.run # => -16.0\n```\n\nclosures\n```rb\ndo_something = VM.new [ # fn do_something(b) { echo a; echo b; }\n  Op::LOAD, 0,\n  Op::ECHO,\n  Op::LOAD, 1,\n  Op::ECHO,\n  Op::END\n], [\"a\", \"b\"] of Types::ValidType\n\nvm = VM.new [ # a = \"something\" (define do_something) do_something(\"some value\")\n  Op::PUSH, 0, # \"something\"\n  Op::STORE, 1, # a = \"something\"\n\n  # start of function def, first values are arguments. second to last value is the function body (as it's own VM).\n  Op::PUSH, 4, # \"b\"\n  Op::PUSH, 2, # VM<do_something>\n  Op::PROC, 3, 1, # create fn with name at address 3 (\"func\"), and 1 argument (\"b\")\n\n  Op::PUSH, 5, # \"some value\"\n  Op::CALL, 2, 1, # lookup and call closure name at address 2 with 1 argument (\"some value\")\n  Op::END\n], [\n  \"something\", \"a\",\n  do_something \"func\", \"b\",\n  \"some value\"\n] of Types::ValidType\n\nvm.run # => something some value\n```\n\nfibonacci sequence\n```rb\nfib = VM.new [\n  Op::LOAD, 0,\n  Op::PUSH, 1,\n  Op::LT,\n\n  Op::JZ, 10, # if false jump to 10 (noop)\n  Op::LOAD, 0, # n\n  Op::RETURN,\n\n  Op::NOOP, # else (this is unnecessary, just for readability)\n  Op::LOAD, 0, # n\n  Op::PUSH, 2, # 1\n  Op::SUB, # n - 1\n  Op::CALL, 3, 1, # fib(n - 1)\n\n  Op::LOAD, 0, # n\n  Op::PUSH, 1, # 2\n  Op::SUB, # n - 2\n  Op::CALL, 3, 1, # fib(n - 2)\n  Op::ADD, # fib(n - 1) + fib(n - 2)\n\n  Op::RETURN\n], [\"n\", 2, 1, \"fib\"] of Types::ValidType\n\nvm = VM.new [\n  Op::PUSH, 2,\n  Op::PUSH, 0,\n  Op::PROC, 1, 1,\n\n  Op::PUSH, 3,\n  Op::CALL, 1, 1,\n  Op::ECHO,\n  Op::END\n], [fib, \"fib\", \"n\", 25] of Types::ValidType\n\nvm.run # 75025\n```\n","program":{"html_id":"bytecode/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"ancestors":[{"html_id":"bytecode/Types","kind":"module","full_name":"Types","name":"Types"}],"locations":[],"repository_name":"bytecode","program":true,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"bytecode/Types","kind":"module","full_name":"Types","name":"Types"}],"extended_modules":[{"html_id":"bytecode/Types","kind":"module","full_name":"Types","name":"Types"}],"types":[{"html_id":"bytecode/Closure","path":"Closure.html","kind":"class","full_name":"Closure","name":"Closure","abstract":false,"superclass":{"html_id":"bytecode/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"bytecode/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"bytecode/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/closure.cr","line_number":3,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/closure.cr#L3"}],"repository_name":"bytecode","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(name:String,function_def:VM,scope:Scope,arg_names:Array(String))-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"function_def","external_name":"function_def","restriction":"VM"},{"name":"scope","external_name":"scope","restriction":"Scope"},{"name":"arg_names","external_name":"arg_names","restriction":"Array(String)"}],"args_string":"(name : String, function_def : VM, scope : Scope, arg_names : Array(String))","args_html":"(name : String, function_def : <a href=\"VM.html\">VM</a>, scope : <a href=\"Scope.html\">Scope</a>, arg_names : Array(String))","location":{"filename":"src/closure.cr","line_number":6,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/closure.cr#L6"},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"function_def","external_name":"function_def","restriction":"VM"},{"name":"scope","external_name":"scope","restriction":"Scope"},{"name":"arg_names","external_name":"arg_names","restriction":"Array(String)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, function_def, scope, arg_names)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"call(arg_values):Types::ValidType-instance-method","name":"call","abstract":false,"args":[{"name":"arg_values","external_name":"arg_values","restriction":""}],"args_string":"(arg_values) : Types::ValidType","args_html":"(arg_values) : <a href=\"Types/ValidType.html\">Types::ValidType</a>","location":{"filename":"src/closure.cr","line_number":13,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/closure.cr#L13"},"def":{"name":"call","args":[{"name":"arg_values","external_name":"arg_values","restriction":""}],"return_type":"Types::ValidType","visibility":"Public","body":"local_scope = Scope.new(@scope)\narg_values.each_with_index do |arg, i|\n  local_scope.assign(@arg_names[i], arg)\nend\n(VM.new(@function_def.bytecode, @function_def.memory, local_scope)).run\n"}},{"html_id":"scope:Scope-instance-method","name":"scope","abstract":false,"location":{"filename":"src/closure.cr","line_number":4,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/closure.cr#L4"},"def":{"name":"scope","return_type":"Scope","visibility":"Public","body":"@scope"}}]},{"html_id":"bytecode/Op","path":"Op.html","kind":"enum","full_name":"Op","name":"Op","abstract":false,"ancestors":[{"html_id":"bytecode/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"bytecode/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"bytecode/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"bytecode/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/opcodes.cr","line_number":1,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L1"}],"repository_name":"bytecode","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"END","name":"END","value":"0"},{"id":"ECHO","name":"ECHO","value":"1"},{"id":"PUSH","name":"PUSH","value":"2"},{"id":"POP","name":"POP","value":"3"},{"id":"SWAP","name":"SWAP","value":"4"},{"id":"DUP","name":"DUP","value":"5"},{"id":"RETURN","name":"RETURN","value":"6"},{"id":"PROC","name":"PROC","value":"7"},{"id":"CALL","name":"CALL","value":"8"},{"id":"LOAD","name":"LOAD","value":"9"},{"id":"STORE","name":"STORE","value":"10"},{"id":"CONCAT","name":"CONCAT","value":"11"},{"id":"ADD","name":"ADD","value":"12"},{"id":"SUB","name":"SUB","value":"13"},{"id":"MUL","name":"MUL","value":"14"},{"id":"DIV","name":"DIV","value":"15"},{"id":"POW","name":"POW","value":"16"},{"id":"MOD","name":"MOD","value":"17"},{"id":"BSHL","name":"BSHL","value":"18"},{"id":"BSHR","name":"BSHR","value":"19"},{"id":"BNOT","name":"BNOT","value":"20"},{"id":"BAND","name":"BAND","value":"21"},{"id":"BOR","name":"BOR","value":"22"},{"id":"BXOR","name":"BXOR","value":"23"},{"id":"AND","name":"AND","value":"24"},{"id":"OR","name":"OR","value":"25"},{"id":"NOT","name":"NOT","value":"26"},{"id":"LT","name":"LT","value":"27"},{"id":"LTE","name":"LTE","value":"28"},{"id":"GT","name":"GT","value":"29"},{"id":"GTE","name":"GTE","value":"30"},{"id":"EQ","name":"EQ","value":"31"},{"id":"JMP","name":"JMP","value":"32"},{"id":"JZ","name":"JZ","value":"33"},{"id":"JNZ","name":"JNZ","value":"34"},{"id":"NOOP","name":"NOOP","value":"35"}],"instance_methods":[{"html_id":"add?-instance-method","name":"add?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":14,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L14"},"def":{"name":"add?","visibility":"Public","body":"self == ADD"}},{"html_id":"and?-instance-method","name":"and?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":26,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L26"},"def":{"name":"and?","visibility":"Public","body":"self == AND"}},{"html_id":"band?-instance-method","name":"band?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":23,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L23"},"def":{"name":"band?","visibility":"Public","body":"self == BAND"}},{"html_id":"bnot?-instance-method","name":"bnot?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":22,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L22"},"def":{"name":"bnot?","visibility":"Public","body":"self == BNOT"}},{"html_id":"bor?-instance-method","name":"bor?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":24,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L24"},"def":{"name":"bor?","visibility":"Public","body":"self == BOR"}},{"html_id":"bshl?-instance-method","name":"bshl?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":20,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L20"},"def":{"name":"bshl?","visibility":"Public","body":"self == BSHL"}},{"html_id":"bshr?-instance-method","name":"bshr?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":21,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L21"},"def":{"name":"bshr?","visibility":"Public","body":"self == BSHR"}},{"html_id":"bxor?-instance-method","name":"bxor?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":25,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L25"},"def":{"name":"bxor?","visibility":"Public","body":"self == BXOR"}},{"html_id":"call?-instance-method","name":"call?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":10,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L10"},"def":{"name":"call?","visibility":"Public","body":"self == CALL"}},{"html_id":"concat?-instance-method","name":"concat?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":13,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L13"},"def":{"name":"concat?","visibility":"Public","body":"self == CONCAT"}},{"html_id":"div?-instance-method","name":"div?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":17,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L17"},"def":{"name":"div?","visibility":"Public","body":"self == DIV"}},{"html_id":"dup?-instance-method","name":"dup?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":7,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L7"},"def":{"name":"dup?","visibility":"Public","body":"self == DUP"}},{"html_id":"echo?-instance-method","name":"echo?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":3,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L3"},"def":{"name":"echo?","visibility":"Public","body":"self == ECHO"}},{"html_id":"end?-instance-method","name":"end?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":2,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L2"},"def":{"name":"end?","visibility":"Public","body":"self == END"}},{"html_id":"eq?-instance-method","name":"eq?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":33,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L33"},"def":{"name":"eq?","visibility":"Public","body":"self == EQ"}},{"html_id":"gt?-instance-method","name":"gt?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":31,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L31"},"def":{"name":"gt?","visibility":"Public","body":"self == GT"}},{"html_id":"gte?-instance-method","name":"gte?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":32,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L32"},"def":{"name":"gte?","visibility":"Public","body":"self == GTE"}},{"html_id":"jmp?-instance-method","name":"jmp?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":34,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L34"},"def":{"name":"jmp?","visibility":"Public","body":"self == JMP"}},{"html_id":"jnz?-instance-method","name":"jnz?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":36,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L36"},"def":{"name":"jnz?","visibility":"Public","body":"self == JNZ"}},{"html_id":"jz?-instance-method","name":"jz?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":35,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L35"},"def":{"name":"jz?","visibility":"Public","body":"self == JZ"}},{"html_id":"load?-instance-method","name":"load?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":11,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L11"},"def":{"name":"load?","visibility":"Public","body":"self == LOAD"}},{"html_id":"lt?-instance-method","name":"lt?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":29,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L29"},"def":{"name":"lt?","visibility":"Public","body":"self == LT"}},{"html_id":"lte?-instance-method","name":"lte?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":30,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L30"},"def":{"name":"lte?","visibility":"Public","body":"self == LTE"}},{"html_id":"mod?-instance-method","name":"mod?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":19,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L19"},"def":{"name":"mod?","visibility":"Public","body":"self == MOD"}},{"html_id":"mul?-instance-method","name":"mul?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":16,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L16"},"def":{"name":"mul?","visibility":"Public","body":"self == MUL"}},{"html_id":"noop?-instance-method","name":"noop?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":37,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L37"},"def":{"name":"noop?","visibility":"Public","body":"self == NOOP"}},{"html_id":"not?-instance-method","name":"not?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":28,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L28"},"def":{"name":"not?","visibility":"Public","body":"self == NOT"}},{"html_id":"or?-instance-method","name":"or?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":27,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L27"},"def":{"name":"or?","visibility":"Public","body":"self == OR"}},{"html_id":"pop?-instance-method","name":"pop?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":5,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L5"},"def":{"name":"pop?","visibility":"Public","body":"self == POP"}},{"html_id":"pow?-instance-method","name":"pow?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":18,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L18"},"def":{"name":"pow?","visibility":"Public","body":"self == POW"}},{"html_id":"proc?-instance-method","name":"proc?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":9,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L9"},"def":{"name":"proc?","visibility":"Public","body":"self == PROC"}},{"html_id":"push?-instance-method","name":"push?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":4,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L4"},"def":{"name":"push?","visibility":"Public","body":"self == PUSH"}},{"html_id":"return?-instance-method","name":"return?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":8,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L8"},"def":{"name":"return?","visibility":"Public","body":"self == RETURN"}},{"html_id":"store?-instance-method","name":"store?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":12,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L12"},"def":{"name":"store?","visibility":"Public","body":"self == STORE"}},{"html_id":"sub?-instance-method","name":"sub?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":15,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L15"},"def":{"name":"sub?","visibility":"Public","body":"self == SUB"}},{"html_id":"swap?-instance-method","name":"swap?","abstract":false,"location":{"filename":"src/opcodes.cr","line_number":6,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/opcodes.cr#L6"},"def":{"name":"swap?","visibility":"Public","body":"self == SWAP"}}]},{"html_id":"bytecode/Scope","path":"Scope.html","kind":"class","full_name":"Scope","name":"Scope","abstract":false,"superclass":{"html_id":"bytecode/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"bytecode/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"bytecode/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/scope.cr","line_number":5,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/scope.cr#L5"}],"repository_name":"bytecode","program":false,"enum":false,"alias":false,"const":false,"doc":"TODO: invalid variable identifiers, already defined variables, undefined variables","summary":"<p><span class=\"flag orange\">TODO</span>  invalid variable identifiers, already defined variables, undefined variables</p>","constructors":[{"html_id":"new(parent:Nil|Scope=nil)-class-method","name":"new","abstract":false,"args":[{"name":"parent","default_value":"nil","external_name":"parent","restriction":"::Nil | ::Scope"}],"args_string":"(parent : Nil | Scope = nil)","args_html":"(parent : Nil | <a href=\"Scope.html\">Scope</a> = <span class=\"n\">nil</span>)","location":{"filename":"src/scope.cr","line_number":9,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/scope.cr#L9"},"def":{"name":"new","args":[{"name":"parent","default_value":"nil","external_name":"parent","restriction":"::Nil | ::Scope"}],"visibility":"Public","body":"_ = allocate\n_.initialize(parent)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign(name:String,value:Types::ValidType)-instance-method","name":"assign","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"value","external_name":"value","restriction":"Types::ValidType"}],"args_string":"(name : String, value : Types::ValidType)","args_html":"(name : String, value : <a href=\"Types/ValidType.html\">Types::ValidType</a>)","location":{"filename":"src/scope.cr","line_number":24,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/scope.cr#L24"},"def":{"name":"assign","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"value","external_name":"value","restriction":"Types::ValidType"}],"visibility":"Public","body":"@variables[name] = value"}},{"html_id":"create_closure(name)-instance-method","name":"create_closure","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""}],"args_string":"(name)","args_html":"(name)","location":{"filename":"src/scope.cr","line_number":28,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/scope.cr#L28"},"def":{"name":"create_closure","args":[{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"Closure.new(name, self)"}},{"html_id":"lookup(name:String):Types::ValidType-instance-method","name":"lookup","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Types::ValidType","args_html":"(name : String) : <a href=\"Types/ValidType.html\">Types::ValidType</a>","location":{"filename":"src/scope.cr","line_number":14,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/scope.cr#L14"},"def":{"name":"lookup","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Types::ValidType","visibility":"Public","body":"if @variables.has_key?(name)\n  return @variables[name]\nelse\n  if parent = @parent\n    return parent.lookup(name)\n  else\n    return \"nil\"\n  end\nend"}}]},{"html_id":"bytecode/TypeChecker","path":"TypeChecker.html","kind":"module","full_name":"TypeChecker(T)","name":"TypeChecker","abstract":false,"locations":[{"filename":"src/typechecker.cr","line_number":4,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/typechecker.cr#L4"}],"repository_name":"bytecode","program":false,"enum":false,"alias":false,"const":false,"class_methods":[{"html_id":"assert(operand:ValidType)-class-method","name":"assert","abstract":false,"args":[{"name":"operand","external_name":"operand","restriction":"ValidType"}],"args_string":"(operand : ValidType)","args_html":"(operand : <a href=\"Types/ValidType.html\">ValidType</a>)","location":{"filename":"src/typechecker.cr","line_number":10,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/typechecker.cr#L10"},"def":{"name":"assert","args":[{"name":"operand","external_name":"operand","restriction":"ValidType"}],"visibility":"Public","body":"if operand.is_a?(T)\nelse\n  raise(\"Invalid operand type: #{typeof(operand)}\")\nend"}},{"html_id":"assert_operands(left:ValidType,right:ValidType)-class-method","name":"assert_operands","abstract":false,"args":[{"name":"left","external_name":"left","restriction":"ValidType"},{"name":"right","external_name":"right","restriction":"ValidType"}],"args_string":"(left : ValidType, right : ValidType)","args_html":"(left : <a href=\"Types/ValidType.html\">ValidType</a>, right : <a href=\"Types/ValidType.html\">ValidType</a>)","location":{"filename":"src/typechecker.cr","line_number":5,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/typechecker.cr#L5"},"def":{"name":"assert_operands","args":[{"name":"left","external_name":"left","restriction":"ValidType"},{"name":"right","external_name":"right","restriction":"ValidType"}],"visibility":"Public","body":"if left.is_a?(T)\nelse\n  raise(\"Invalid left operand type: #{typeof(left)}\")\nend\nif right.is_a?(T)\nelse\n  raise(\"Invalid right operand type: #{typeof(right)}\")\nend\n"}}]},{"html_id":"bytecode/Types","path":"Types.html","kind":"module","full_name":"Types","name":"Types","abstract":false,"locations":[{"filename":"src/types.cr","line_number":1,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/types.cr#L1"}],"repository_name":"bytecode","program":false,"enum":false,"alias":false,"const":false,"types":[{"html_id":"bytecode/Types/ValidType","path":"Types/ValidType.html","kind":"alias","full_name":"Types::ValidType","name":"ValidType","abstract":false,"locations":[{"filename":"src/types.cr","line_number":2,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/types.cr#L2"}],"repository_name":"bytecode","program":false,"enum":false,"alias":true,"aliased":"(Closure | Float64 | Int32 | Int64 | String | VM | Nil)","aliased_html":"<a href=\"../Closure.html\">Closure</a> | Float64 | Int32 | Int64 | String | <a href=\"../VM.html\">VM</a> | Nil","const":false,"namespace":{"html_id":"bytecode/Types","kind":"module","full_name":"Types","name":"Types"}}]},{"html_id":"bytecode/VM","path":"VM.html","kind":"class","full_name":"VM","name":"VM","abstract":false,"superclass":{"html_id":"bytecode/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"bytecode/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"bytecode/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/vm.cr","line_number":6,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/vm.cr#L6"}],"repository_name":"bytecode","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(bytecode:Array(Int32|Op),memory:Array(Types::ValidType),scope:Scope|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"bytecode","external_name":"bytecode","restriction":"Array(Int32 | Op)"},{"name":"memory","external_name":"memory","restriction":"Array(Types::ValidType)"},{"name":"scope","default_value":"nil","external_name":"scope","restriction":"Scope | ::Nil"}],"args_string":"(bytecode : Array(Int32 | Op), memory : Array(Types::ValidType), scope : Scope | Nil = nil)","args_html":"(bytecode : Array(Int32 | <a href=\"Op.html\">Op</a>), memory : Array(<a href=\"Types/ValidType.html\">Types::ValidType</a>), scope : <a href=\"Scope.html\">Scope</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/vm.cr","line_number":11,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/vm.cr#L11"},"def":{"name":"new","args":[{"name":"bytecode","external_name":"bytecode","restriction":"Array(Int32 | Op)"},{"name":"memory","external_name":"memory","restriction":"Array(Types::ValidType)"},{"name":"scope","default_value":"nil","external_name":"scope","restriction":"Scope | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(bytecode, memory, scope)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"bytecode:Array(Int32|Op)-instance-method","name":"bytecode","abstract":false,"location":{"filename":"src/vm.cr","line_number":7,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/vm.cr#L7"},"def":{"name":"bytecode","return_type":"Array(Int32 | Op)","visibility":"Public","body":"@bytecode"}},{"html_id":"memory:Array(Types::ValidType)-instance-method","name":"memory","abstract":false,"location":{"filename":"src/vm.cr","line_number":8,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/vm.cr#L8"},"def":{"name":"memory","return_type":"Array(Types::ValidType)","visibility":"Public","body":"@memory"}},{"html_id":"run-instance-method","name":"run","abstract":false,"location":{"filename":"src/vm.cr","line_number":23,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/vm.cr#L23"},"def":{"name":"run","visibility":"Public","body":"while @ptr < @bytecode.size\n  op = @bytecode[@ptr]\n  case op\n  when Op::NOOP\n    @ptr = @ptr + 1\n  when Op::END\n    break\n  when Op::ECHO\n    value = @stack.pop\n    puts(value)\n    @stack << value\n    @ptr = @ptr + 1\n  when Op::PUSH\n    @stack << @memory[@bytecode[@ptr + 1].to_i]\n    @ptr = @ptr + 2\n  when Op::POP\n    @stack.pop\n    @ptr = @ptr + 1\n  when Op::SWAP\n    right = @stack.pop\n    left = @stack.pop\n    @stack << right\n    @stack << left\n    @ptr = @ptr + 1\n  when Op::DUP\n    value = @stack.last\n    @stack << value\n    @ptr = @ptr + 1\n  when Op::LOAD\n    name = @memory[@bytecode[@ptr + 1].to_i].to_s\n    @stack << (@scope.lookup(name))\n    @ptr = @ptr + 2\n  when Op::STORE\n    name = @memory[@bytecode[@ptr + 1].to_i].to_s\n    value = @stack.pop\n    @scope.assign(name, value)\n    @ptr = @ptr + 2\n  when Op::RETURN\n    return @stack.pop\n  when Op::PROC\n    name = @memory[@bytecode[@ptr + 1].to_i].to_s\n    definition = @stack.pop\n    TypeChecker(VM).assert(definition)\n    arg_count = @bytecode[@ptr + 2].to_i\n    arg_names = Array(String).new(arg_count) do\n      arg_name = @stack.pop\n      TypeChecker(String).assert(arg_name)\n      arg_name.to_s\n    end\n    closure = Closure.new(name, definition.as(VM), @scope, arg_names)\n    @scope.assign(name, closure)\n    @ptr = @ptr + 3\n  when Op::CALL\n    var_addr = @bytecode[@ptr + 1].to_i\n    arg_count = @bytecode[@ptr + 2].to_i\n    arg_values = Array(Types::ValidType).new(arg_count) do\n      @stack.pop\n    end\n    var_name = @memory[var_addr].to_s\n    closure = @scope.lookup(var_name)\n    TypeChecker(Closure).assert(closure)\n    @stack << ((closure.as(Closure)).call(arg_values))\n    @ptr = @ptr + 3\n  when Op::CONCAT\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(String).assert_operands(left, right)\n    @stack << (left.to_s + right.to_s)\n    @ptr = @ptr + 1\n  when Op::ADD\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Float64 | Int64 | Int32).assert_operands(left, right)\n    @stack << ((left.as(Float64 | Int64 | Int32)) + (right.as(Float64 | Int64 | Int32)))\n    @ptr = @ptr + 1\n  when Op::SUB\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Float64 | Int64 | Int32).assert_operands(left, right)\n    @stack << ((left.as(Float64 | Int64 | Int32)) - (right.as(Float64 | Int64 | Int32)))\n    @ptr = @ptr + 1\n  when Op::MUL\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Float64 | Int64 | Int32).assert_operands(left, right)\n    @stack << ((left.as(Float64 | Int64 | Int32)) * (right.as(Float64 | Int64 | Int32)))\n    @ptr = @ptr + 1\n  when Op::DIV\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Float64 | Int64 | Int32).assert_operands(left, right)\n    @stack << ((left.as(Float64 | Int64 | Int32)) / (right.as(Float64 | Int64 | Int32)))\n    @ptr = @ptr + 1\n  when Op::POW\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Float64 | Int64 | Int32).assert_operands(left, right)\n    @stack << ((left.as(Float64 | Int64 | Int32)) ** (right.as(Float64 | Int64 | Int32)))\n    @ptr = @ptr + 1\n  when Op::MOD\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Int64).assert_operands(left, right)\n    @stack << ((left.as(Int64)) % (right.as(Int64)))\n    @ptr = @ptr + 1\n  when Op::BSHL\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Int64).assert_operands(left, right)\n    @stack << ((left.as(Int64)) << (right.as(Int64)))\n    @ptr = @ptr + 1\n  when Op::BSHR\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Int64).assert_operands(left, right)\n    @stack << ((left.as(Int64)) >> (right.as(Int64)))\n    @ptr = @ptr + 1\n  when Op::BNOT\n    operand = @stack.pop\n    TypeChecker(Int64).assert(operand)\n    @stack << (~(operand.as(Int64)))\n    @ptr = @ptr + 1\n  when Op::BAND\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Int64).assert_operands(left, right)\n    @stack << ((left.as(Int64)) & (right.as(Int64)))\n    @ptr = @ptr + 1\n  when Op::BOR\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Int64).assert_operands(left, right)\n    @stack << ((left.as(Int64)) | (right.as(Int64)))\n    @ptr = @ptr + 1\n  when Op::BXOR\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Int64).assert_operands(left, right)\n    @stack << ((left.as(Int64)) ^ (right.as(Int64)))\n    @ptr = @ptr + 1\n  when Op::AND\n    right = @stack.pop\n    left = @stack.pop\n    @stack << ((    left && right) ? 1 : 0)\n    @ptr = @ptr + 1\n  when Op::OR\n    right = @stack.pop\n    left = @stack.pop\n    @stack << ((    left || right) ? 1 : 0)\n    @ptr = @ptr + 1\n  when Op::NOT\n    operand = @stack.pop\n    @stack << (!operand ? 1 : 0)\n    @ptr = @ptr + 1\n  when Op::LT\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Float64 | Int64 | Int32).assert_operands(left, right)\n    @stack << ((    (left.as(Float64 | Int64 | Int32)) < (right.as(Float64 | Int64 | Int32))) ? 1 : 0)\n    @ptr = @ptr + 1\n  when Op::LTE\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Float64 | Int64 | Int32).assert_operands(left, right)\n    @stack << ((    (left.as(Float64 | Int64 | Int32)) <= (right.as(Float64 | Int64 | Int32))) ? 1 : 0)\n    @ptr = @ptr + 1\n  when Op::GT\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Float64 | Int64 | Int32).assert_operands(left, right)\n    @stack << ((    (left.as(Float64 | Int64 | Int32)) > (right.as(Float64 | Int64 | Int32))) ? 1 : 0)\n    @ptr = @ptr + 1\n  when Op::GTE\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Float64 | Int64 | Int32).assert_operands(left, right)\n    @stack << ((    (left.as(Float64 | Int64 | Int32)) >= (right.as(Float64 | Int64 | Int32))) ? 1 : 0)\n    @ptr = @ptr + 1\n  when Op::EQ\n    right = @stack.pop\n    left = @stack.pop\n    TypeChecker(Float64 | Int64 | Int32).assert_operands(left, right)\n    @stack << ((    (left.as(Float64 | Int64 | Int32)) == (right.as(Float64 | Int64 | Int32))) ? 1 : 0)\n    @ptr = @ptr + 1\n  when Op::JMP\n    @ptr = @bytecode[@ptr + 1].to_i\n  when Op::JNZ\n    value = @stack.pop\n    if value != 0\n      @ptr = @bytecode[@ptr + 1].to_i\n    else\n      @ptr = @ptr + 2\n    end\n  when Op::JZ\n    value = @stack.pop\n    if value == 0\n      @ptr = @bytecode[@ptr + 1].to_i\n    else\n      @ptr = @ptr + 2\n    end\n  end\nend"}},{"html_id":"stack:Array(Types::ValidType)-instance-method","name":"stack","abstract":false,"location":{"filename":"src/vm.cr","line_number":9,"url":"https://github.com/R-unic/simple-vm/blob/e92f4653a16608f0d657e7b37a4026908784a8e2/src/vm.cr#L9"},"def":{"name":"stack","return_type":"Array(Types::ValidType)","visibility":"Public","body":"@stack"}}]}]}}